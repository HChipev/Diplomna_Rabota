generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

//! auth schema start
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

model identities {
  id              String
  user_id         String     @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime?  @db.Timestamptz(6)
  created_at      DateTime?  @db.Timestamptz(6)
  updated_at      DateTime?  @db.Timestamptz(6)
  email           String?    @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  users           auth_users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@schema("auth")
}

model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@schema("auth")
}

model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "refresh_token_session_id")
  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@schema("auth")
}

model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@schema("auth")
}

model auth_users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique @db.VarChar(15)
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("") @db.VarChar(15)
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  users                       public_users?

  @@index([instance_id])
  @@map("users")
  @@schema("auth")
}

//! auth schema end

//* public schema start
model cars {
  id            BigInt       @id @unique @default(autoincrement())
  user_id       BigInt
  make_id       BigInt
  year          Decimal      @db.Decimal
  price         Float
  engine_id     BigInt
  gearbox_id    BigInt
  horsepower    Decimal      @db.Decimal
  milage        Decimal      @db.Decimal
  drivetrain_id BigInt
  region_id     BigInt
  color_id      BigInt
  features      String[]     @db.VarChar
  description   String
  is_on_parts   Boolean
  is_saved      Boolean
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  colors        colors       @relation(fields: [color_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drivetrains   drivetrains  @relation(fields: [drivetrain_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  engines       engines      @relation(fields: [engine_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gearboxes     gearboxes    @relation(fields: [gearbox_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  makes         makes        @relation(fields: [make_id], references: [make_id], onDelete: NoAction, onUpdate: NoAction)
  regions       regions      @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         public_users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages      messages[]

  @@schema("public")
}

model cities {
  region_id BigInt
  id        BigInt  @id @unique @default(autoincrement())
  city      String  @db.VarChar
  regions   regions @relation(fields: [region_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model colors {
  id    BigInt @id @unique @default(autoincrement())
  color String @unique @db.VarChar
  cars  cars[]

  @@schema("public")
}

model drivetrains {
  id   BigInt @id @unique @default(autoincrement())
  type String @unique @db.VarChar
  cars cars[]

  @@schema("public")
}

model engines {
  id   BigInt @id @unique @default(autoincrement())
  type String @unique @db.VarChar
  cars cars[]

  @@schema("public")
}

model gearboxes {
  id   BigInt @id @unique @default(autoincrement())
  type String @unique @db.VarChar
  cars cars[]

  @@schema("public")
}

model makes {
  make_id BigInt   @id @default(autoincrement())
  make    String   @unique @db.VarChar
  cars    cars[]
  models  models[]

  @@schema("public")
}

model messages {
  id         BigInt       @id @unique @default(autoincrement())
  user_id    String       @db.Uuid
  first_name String       @db.VarChar
  last_name  String       @db.VarChar
  phone      String       @db.VarChar
  message    String
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  car_id     BigInt
  cars       cars         @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      public_users @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model models {
  id      BigInt @id @default(autoincrement())
  make_id BigInt
  model   String @db.VarChar
  makes   makes  @relation(fields: [make_id], references: [make_id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model regions {
  id     BigInt   @id @unique @default(autoincrement())
  region String   @unique @db.VarChar
  cars   cars[]
  cities cities[]

  @@schema("public")
}

model public_users {
  id       BigInt     @id(map: "user_pkey") @unique @default(autoincrement())
  role     String     @db.VarChar
  phone    String?    @default("") @db.VarChar
  user_id  String     @unique(map: "user_user_id_key") @db.Uuid
  cars     cars[]
  messages messages[]
  users    auth_users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
  @@schema("public")
}

//* public schema end

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}
